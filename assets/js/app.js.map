{
  "version": 3,
  "sources": ["../../src/app.ts"],
  "sourcesContent": ["const text = document.getElementById('search') as HTMLInputElement;\nconst search = document.getElementById('search-btn') as HTMLButtonElement;\n\n// fetch from storage - User Tags, Id => tags map\nlet userTags, tagsMap, folders\nfetchData()\n\n\nif (!text || !search) {\n  //process.exit()\n  console.error(\"Error loading page elements\")\n}\n\nsearch.addEventListener('click', () => {\n  chrome.bookmarks.getTree(res => {\n    // Fetch Main Bookmarks Node\n    console.log(userTags, tagsMap)\n    const tree = res[0]?.children?.[0]?.children\n    if (tree && tree.length > 0) {\n      for (const node of tree) {\n        console.log(node?.title == \"\" ? \"Bookmarks\" : `${node?.title} - ${node.id}`)\n      }\n    }\n  })\n});\n\nchrome.runtime.sendMessage(\"Test Meaasge\")\n\n\nasync function fetchData() {\n  const data = await Promise.all([\n    chrome.storage.sync.get('userTags'),\n    chrome.storage.sync.get('folders'),\n    chrome.storage.sync.get('tagsMap')\n  ])\n  userTags = data[0].userTags || {}\n  folders = data[1].folders\n  tagsMap = data[1].tagsMap || {}\n  // create folders array if not found\n  if (!folders || !tagsMap) {\n    const tree = await chrome.bookmarks.getTree()\n    const bookmarks = tree[0]?.children?.[0]?.children\n    if (!bookmarks) {\n      return\n    }\n    folders = new Set()\n    for (const node of bookmarks) {\n      inspectNode(node)\n    }\n  }\n  console.log(folders)\n  console.log(tagsMap)\n}\n\nfunction inspectNode(node: chrome.bookmarks.BookmarkTreeNode) {\n  if (node.hasOwnProperty('children')) {\n    folders.add(node.title)\n    for (const child of node?.children) {\n      inspectNode(child)\n    }\n  } else {\n    tagsMap[node.id] = []\n  }\n}\n"],
  "mappings": ";;;AAAA,MAAM,OAAO,SAAS,eAAe,QAAQ;AAC7C,MAAM,SAAS,SAAS,eAAe,YAAY;AAGnD,MAAI;AAAJ,MAAc;AAAd,MAAuB;AACvB,YAAU;AAGV,MAAI,CAAC,QAAQ,CAAC,QAAQ;AAEpB,YAAQ,MAAM,6BAA6B;AAAA,EAC7C;AAEA,SAAO,iBAAiB,SAAS,MAAM;AACrC,WAAO,UAAU,QAAQ,SAAO;AAE9B,cAAQ,IAAI,UAAU,OAAO;AAC7B,YAAM,OAAO,IAAI,CAAC,GAAG,WAAW,CAAC,GAAG;AACpC,UAAI,QAAQ,KAAK,SAAS,GAAG;AAC3B,mBAAW,QAAQ,MAAM;AACvB,kBAAQ,IAAI,MAAM,SAAS,KAAK,cAAc,GAAG,MAAM,KAAK,MAAM,KAAK,EAAE,EAAE;AAAA,QAC7E;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AAED,SAAO,QAAQ,YAAY,cAAc;AAGzC,iBAAe,YAAY;AACzB,UAAM,OAAO,MAAM,QAAQ,IAAI;AAAA,MAC7B,OAAO,QAAQ,KAAK,IAAI,UAAU;AAAA,MAClC,OAAO,QAAQ,KAAK,IAAI,SAAS;AAAA,MACjC,OAAO,QAAQ,KAAK,IAAI,SAAS;AAAA,IACnC,CAAC;AACD,eAAW,KAAK,CAAC,EAAE,YAAY,CAAC;AAChC,cAAU,KAAK,CAAC,EAAE;AAClB,cAAU,KAAK,CAAC,EAAE,WAAW,CAAC;AAE9B,QAAI,CAAC,WAAW,CAAC,SAAS;AACxB,YAAM,OAAO,MAAM,OAAO,UAAU,QAAQ;AAC5C,YAAM,YAAY,KAAK,CAAC,GAAG,WAAW,CAAC,GAAG;AAC1C,UAAI,CAAC,WAAW;AACd;AAAA,MACF;AACA,gBAAU,oBAAI,IAAI;AAClB,iBAAW,QAAQ,WAAW;AAC5B,oBAAY,IAAI;AAAA,MAClB;AAAA,IACF;AACA,YAAQ,IAAI,OAAO;AACnB,YAAQ,IAAI,OAAO;AAAA,EACrB;AAEA,WAAS,YAAY,MAAyC;AAC5D,QAAI,KAAK,eAAe,UAAU,GAAG;AACnC,cAAQ,IAAI,KAAK,KAAK;AACtB,iBAAW,SAAS,MAAM,UAAU;AAClC,oBAAY,KAAK;AAAA,MACnB;AAAA,IACF,OAAO;AACL,cAAQ,KAAK,EAAE,IAAI,CAAC;AAAA,IACtB;AAAA,EACF;",
  "names": []
}
